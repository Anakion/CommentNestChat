import uuid
from typing import Annotated

from fastapi import APIRouter, Request, Response, Depends, HTTPException
from src.services.captcha import CaptchaService
from src.services.redis_service import RedisService

router = APIRouter(prefix="/captcha", tags=["captcha"])

# ‚ö†Ô∏è –û–ë–™–Ø–í–õ–Ø–ï–ú DEPENDENCY –ü–†–Ø–ú–û –ó–î–ï–°–¨ (–±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
async def get_redis_service() -> RedisService:
    return RedisService()

# ‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï –í –ü–ê–ú–Ø–¢–ò
captcha_storage = {"current": None}


@router.get("/")
async def get_captcha(request: Request):
    captcha_service = CaptchaService()
    captcha_text, image_buffer = captcha_service.generate_captcha()

    print(f"üîê BEFORE: {captcha_storage['current']}")  # ‚Üê —á—Ç–æ –±—ã–ª–æ –î–û
    captcha_storage["current"] = captcha_text  # type: ignore
    print(f"üîê AFTER: {captcha_storage['current']}")  # ‚Üê —á—Ç–æ —Å—Ç–∞–ª–æ –ü–û–°–õ–ï

    return Response(
        content=image_buffer.getvalue(),
        media_type="image/png"
    )

# @router.get("/")
# async def get_captcha(
#         request: Request,
#         redis_service: Annotated[RedisService, Depends(get_redis_service)],
# ):
#     # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ cookies
#     print(f"üç™ ALL COOKIES: {dict(request.cookies)}")
#
#     session_id = request.cookies.get("session_id")
#     is_new_session = False
#
#     if not session_id:
#         session_id = str(uuid.uuid4())
#         is_new_session = True
#         print(f"üÜî Created NEW session_id: {session_id}")
#     else:
#         print(f"üÜî Using EXISTING session_id: {session_id}")
#
#     # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞–ø—á–∞
#     existing_captcha = await redis_service.get_captcha(session_id)
#     if existing_captcha:
#         print(f"‚ôªÔ∏è Overwriting existing CAPTCHA for {session_id[:8]}")
#     else:
#         print(f"‚ú® Creating new CAPTCHA for {session_id[:8]}")
#
#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
#     captcha_service = CaptchaService()
#     captcha_text, image_buffer = captcha_service.generate_captcha()
#
#     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç, –µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å)
#     await redis_service.store_captcha(session_id, captcha_text)
#
#     print(f"üîê CAPTCHA for {session_id[:8]}: {captcha_text}")
#     print(f"üìä Redis keys: {await redis_service.redis_client.keys('captcha:*')}")
#
#     # –°–æ–∑–¥–∞—ë–º Response —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
#     response = Response(content=image_buffer.getvalue(), media_type="image/png")
#
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–æ–≤–∞—è
#     if is_new_session:
#         response.set_cookie(
#             key="session_id",
#             value=session_id,
#             httponly=True,
#             max_age=3600,
#             samesite="lax",
#         )
#         print(f"üç™ SET COOKIE: {session_id}")
#
#     return response


