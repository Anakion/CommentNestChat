import json
import os
from http.client import HTTPException
from typing import Annotated, List, Optional

from fastapi import APIRouter, Depends, Query, Form, UploadFile, File
from fastapi.encoders import jsonable_encoder
from starlette.requests import Request
from starlette.responses import FileResponse

from src.core.websocket import manager
from src.dependecy import get_comment_service
from src.schemas.comment import CommentResponseSchema, CommentCreateSchema
from src.services.comment import CommentService

router = APIRouter(prefix="/comments", tags=["comments"])


# @router.post("/", response_model=CommentResponseSchema)
# async def create_comment(
#     payload: CommentCreateSchema,
#     service: Annotated[CommentService, Depends(get_comment_service)],
# ):
#     new_comment = await service.create_comment(payload)
#
#     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–æ–¥–µ–ª—å –≤ dict –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
#     comment_dict = jsonable_encoder(CommentResponseSchema.model_validate(new_comment))
#     print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", comment_dict)
#
#     # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
#     await manager.broadcast_new_comment(comment_dict)
#
#     print("Broadcasted new_comment:", new_comment.id)
#     return new_comment


# @router.post("/", response_model=CommentResponseSchema)
# async def create_comment(
#         service: Annotated[CommentService, Depends(get_comment_service)],
#         user_name: str = Form(...),
#         email: str = Form(...),
#         home_page: Optional[str] = Form(None),
#         captcha: str = Form(...),
#         text: str = Form(...),
#         parent_id: Optional[int] = Form(None),
#         image: Optional[UploadFile] = File(None),
#         text_file: Optional[UploadFile] = File(None),
# ):
#     # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Å—Ö–µ–º—É
#     payload = CommentCreateSchema(
#         user_name=user_name,
#         email=email,
#         home_page=home_page,
#         captcha=captcha,
#         text=text,
#         parent_id=parent_id
#     )
#
#     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
#     file_path = None
#     file_type = None
#     image_w = None
#     image_h = None
#
#     if image and image.file:
#         file_path, file_type, image_w, image_h = await service.save_image(image)
#     elif text_file and text_file.file:
#         file_path, file_type = await service.save_text_file(text_file)
#
#     # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
#     new_comment = await service.create_comment(
#         comment_data=payload,
#         file_path=file_path,
#         file_type=file_type,
#         image_w=image_w,
#         image_h=image_h
#     )
#
#     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
#     comment_dict = jsonable_encoder(CommentResponseSchema.model_validate(new_comment))
#     print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ñ–∞–π–ª–æ–º:", comment_dict)
#
#     # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
#     await manager.broadcast_new_comment(comment_dict)
#
#     return new_comment


@router.post("/", response_model=CommentResponseSchema)
async def create_comment(
        request: Request,
        service: Annotated[CommentService, Depends(get_comment_service)],
):
    try:
        print("üéØ === REACHED THE FUNCTION! ===")

        # –ü–∞—Ä—Å–∏–º FormData –≤—Ä—É—á–Ω—É—é
        form_data = await request.form()

        print("üîπ Form data keys:", list(form_data.keys()))

        # –î–æ—Å—Ç–∞–µ–º –ø–æ–ª—è –≤—Ä—É—á–Ω—É—é
        user_name = form_data.get("user_name")
        email = form_data.get("email")
        home_page = form_data.get("home_page")
        captcha = form_data.get("captcha")
        text = form_data.get("text")
        parent_id = form_data.get("parent_id")

        # –§–ò–ö–°: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º parent_id
        if parent_id == '':
            parent_id = None
        elif parent_id:
            try:
                parent_id = int(parent_id)
            except ValueError:
                parent_id = None

        print("üîπ user_name:", user_name)
        print("üîπ email:", email)
        print("üîπ home_page:", home_page)
        print("üîπ captcha:", captcha)
        print("üîπ text:", text)
        print("üîπ parent_id:", parent_id, type(parent_id))

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        import re

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if not re.match(r"^[a-zA-Z0-9]{1,60}$", user_name):
            raise HTTPException(422, "Invalid user name format")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if "@" not in email:
            raise HTTPException(422, "Invalid email format")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è CAPTCHA
        if not re.match(r"^[a-zA-Z0-9]{1,10}$", captcha):
            raise HTTPException(422, "Invalid CAPTCHA format")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è HTML —Ç–µ–≥–æ–≤
        allowed_tags = ["a", "code", "i", "strong"]
        tags = re.findall(r"</?(\w+)", text)
        for tag in tags:
            if tag not in allowed_tags:
                raise HTTPException(422, f"HTML tag <{tag}> is not allowed")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã (–æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ó–ê–†–ê–ù–ï–ï)
        file_path = None
        file_type = None
        image_w = None
        image_h = None

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
        image = form_data.get("image")
        text_file = form_data.get("text_file")

        print("üîπ image:", image.filename if image else None)
        print("üîπ text_file:", text_file.filename if text_file else None)

        if image and image.file:
            print("üìÅ Processing image...")
            file_path, file_type, image_w, image_h = await service.save_image(image)
            print("‚úÖ Image saved:", file_path)
        elif text_file and text_file.file:
            print("üìÅ Processing text file...")
            file_path, file_type = await service.save_text_file(text_file)
            print("‚úÖ Text file saved:", file_path)

        # –°–æ–∑–¥–∞–µ–º Pydantic –º–æ–¥–µ–ª—å
        payload = CommentCreateSchema(
            user_name=user_name,
            email=email,
            home_page=home_page,
            captcha=captcha,
            text=text,
            parent_id=parent_id
        )

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ service
        print("üöÄ Creating comment...")
        new_comment = await service.create_comment(
            comment_data=payload,
            file_path=file_path,
            file_type=file_type,
            image_w=image_w,
            image_h=image_h
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
        comment_dict = jsonable_encoder(CommentResponseSchema.model_validate(new_comment))
        print("üì§ Sending new comment:", comment_dict)

        # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        await manager.broadcast_new_comment(comment_dict)

        print("üéä COMMENT CREATED SUCCESSFULLY!")
        return new_comment

    except Exception as e:
        print("üí• UNEXPECTED ERROR:", str(e))
        raise e


@router.get("/", response_model=List[CommentResponseSchema])
async def get_all_comments(
    service: Annotated[CommentService, Depends(get_comment_service)],
):
    return await service.get_all_comments()


@router.get("/files/{file_path:path}")
async def get_file(file_path: str):
    # file_path –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ 'b122c957-8d09-49d1-a312-7b9b84d4fdcb.jpg'
    file_full_path = f"uploads/{file_path}"  # –¥–æ–±–∞–≤–ª—è–µ–º uploads/

    print(f"üîç Looking for file: {file_full_path}")

    if not os.path.exists(file_full_path):
        print(f"‚ùå File not found: {file_full_path}")
        raise HTTPException()

    print(f"‚úÖ File found: {file_full_path}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type
    if file_path.lower().endswith(('.jpg', '.jpeg')):
        media_type = "image/jpeg"
    elif file_path.lower().endswith('.png'):
        media_type = "image/png"
    elif file_path.lower().endswith('.gif'):
        media_type = "image/gif"
    elif file_path.lower().endswith('.txt'):
        media_type = "text/plain"
    else:
        media_type = "application/octet-stream"

    return FileResponse(file_full_path, media_type=media_type)